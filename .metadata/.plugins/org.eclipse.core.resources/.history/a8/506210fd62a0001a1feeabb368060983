/*
 *
 *
 * Activamos con pulsos el puente h
 *
 * Motor derecho PORTC
 * 7 adelante
 * 15 atras
 *
 * Motor izquierdo PORTC
 * 14 adelante
 * 17 atras
 *
 * RX Uart
 * A Adelante
 * B atras
 * C derecha
 * D izquierda
 * E alto
 */


#include "S32K144.h" /* include peripheral declarations S32K144 */

#define adelante (1<<14)+(1<<7)   //LPIT0 Channel 0  Seleccionamos pines 7  y 14;
#define atras (1<<17)+(1<<15)     //LPIT0 Channel 1  Seleccionamos pines 15 y 17;
#define derecha (1<<17)+(1<<7)    //LPIT0 Channel 2  Seleccionamos pines 7  y 17;
#define izquierda (1<<15)+(1<<14) //LPIT0 Channel 3  Seleccionamos pines 15 y 14;
#define alto (0<<17)+(0<<15)+(0<<14)+(0<<7)//


//un arreglo para la dirección y otro arreglo para la duracion en milisegundos
int8_t var_read[8];

//int16_t datos_recibidos;
int16_t datos_recibidosI2C[];
int16_t datos_tx[];


int8_t aceleracionx[2];
int16_t aceleracion_x;

unsigned char duty_cycle=50;
unsigned char espejo_pin;
unsigned char i=0;
unsigned char T=100;
unsigned char data=0;
unsigned char dato=0;
unsigned char error = 0;

void delay (unsigned char tiempoms){
	i=500*tiempoms;
	do{

	}while (--i);
}


void LPUART1_RxTx_IRQHandler (void)
{

	if ((LPUART1->STAT & (1<<21))==(1<<21))   //Rx
	{
		LPUART2->DATA=dato;
		if (dato!='2') LPUART2->CTRL&=~(1<<23);

	}

	if ((LPUART1->STAT & (1<<23))==(1<<23)) //TX
	{
		unsigned char i=0;
		do{

			 // datos_recibidosI2C[7] =LPUART2->DATA;
			//se guardan los datos en la variable datos_tx[], para despues enviarselos en el registro
			//LPUART->DATA

					  unsigned char i=0;
						  if (datos_recibidosI2C[i] == 0x03){

							  datos_tx[i]= 0x03 + 0x30; //adelante
							  LPIT0->TMR[0].TCTRL|=1; //adelante
							  delay(datos_recibidosI2C[i+1]); //tiempo
							  datos_tx[i+1]= datos_recibidosI2C[i+1] + 0x30; //tiempo



						  }
						  else if (datos_recibidosI2C[i] == 0x02){
							  datos_tx[i]= 0x02 + 0x30; //derecha
							  LPIT0->TMR[2].TCTRL|=1; //derecha
							  delay(datos_recibidosI2C[i+1]);
							  datos_tx[i+1]= datos_recibidosI2C[i+1] + 0x30; //tiempo

						  }
						  else if (datos_recibidosI2C[i] == 0x01){
							  datos_tx[i]= 0x01 + 0x30; //izquierda
							  LPIT0->TMR[3].TCTRL|=1; //izquierda
							  delay(datos_recibidosI2C[i+1]);//tiempo
							  datos_tx[i+1]= datos_recibidosI2C[i+1] + 0x30; //tiempo

						  }
						  else if (datos_recibidosI2C[i] == 0x00){
							  datos_tx[i]= 0x00 + 0x30; //alto
							  PCC->PCCn[PCC_LPIT_INDEX]|=(0<<30); //alto
							  delay(datos_recibidosI2C[i+1]);
							  datos_tx[i+1]= datos_recibidosI2C[i+1] + 0x30; //tiempo

						  }
						  i+2;


			}while i == 6;



		 // }



		/*if (data == 'A') LPIT0->TMR[0].TCTRL|=1;
	    else if (data == 'B') LPIT0->TMR[1].TCTRL|=1;
	    else if (data == 'C') LPIT0->TMR[2].TCTRL|=1;
	    else if (data == 'D') LPIT0->TMR[3].TCTRL|=1;
	    else if (data == 'E')  PCC->PCCn[PCC_LPIT_INDEX]|=(0<<30);
*/

     }
}

void UART_init(void)
{

	PCC->PCCn[PCC_PORTC_INDEX]=1<<30;
	PORTC->PCR[7]=2<<8;						//LPUART1 TX
	PORTC->PCR[6]=2<<8;						//LPUART1 RX

	SCG->SIRCDIV=1<<8;						//SIRCDIV2: 8 MHz/1

	PCC->PCCn[PCC_LPUART1_INDEX]=2<<24;		//SIRCDIV2
    PCC->PCCn[PCC_LPUART1_INDEX]|=1<<30;
	LPUART1->BAUD|=52;						//BAUD_SRG=CLK_UART/(16*9600)
	LPUART1->CTRL|=(1<<21)+(1<<19)+(1<<18);	//TE=RE=1
	S32_NVIC->ISER[33/32]=(1<<(33%32));

}

void PORTC_init(void)
{
	PCC->PCCn[PCC_PORTC_INDEX]=(1<<30);
	PORTC->PCR[7]=(9<<16)+(1<<8);
	PORTC->PCR[15]=(9<<16)+(1<<8);
	PORTC->PCR[17]=(9<<16)+(1<<8);
	PORTC->PCR[14]=(9<<16)+(1<<8);
	PTC->PDDR=(1<<7)+(1<<15)+(1<<17)+(1<<14);
	PTC->PDOR=0;
}
void LPIT0_Ch0_init(void)
{

	PCC->PCCn[PCC_LPIT_INDEX]=(2<<24);
    PCC->PCCn[PCC_LPIT_INDEX]|=(1<<30);
	SCG->SIRCDIV=(1<<8);  //8MHz/1

	LPIT0->MCR=1;		//M_CEN=1;
	asm("nop");
	asm("nop");
	asm("nop");
	asm("nop");
	LPIT0->TMR[0].TCTRL=(0<<24)+(1<<23)+(1<<17)+(1<<18);
	LPIT0->TMR[0].TVAL=T;
	LPIT0->MIER=1;
	//LPIT0->TMR[0].TCTRL|=1;
	S32_NVIC->ISER[48/32]=(1<<(48%32));

}
void LPIT0_Ch0_IRQHandler (void)
{

LPIT0->MSR|=1;
//Borrar bandera
LPIT0->TMR[0].TCTRL&=~(1<<0);
PTC->PTOR=adelante;

if (espejo_pin==1)
{
espejo_pin=0;
LPIT0->TMR[0].TVAL=(((100-(unsigned int)duty_cycle)*T)/100);
}
else
{
espejo_pin=1;
LPIT0->TMR[0].TVAL=((((unsigned int)duty_cycle)*T)/100);
}
LPIT0->TMR[0].TCTRL|=(1<<0);       //Enable->Trigger
}

void LPIT0_Ch1_init(void)
{

	PCC->PCCn[PCC_LPIT_INDEX]=(2<<24);
    PCC->PCCn[PCC_LPIT_INDEX]|=(1<<30);
	SCG->SIRCDIV=(1<<8);  //8MHz/1

	LPIT0->MCR=1;		//M_CEN=1;
	asm("nop");
	asm("nop");
	asm("nop");
	asm("nop");
	LPIT0->TMR[1].TCTRL=(0<<24)+(1<<23)+(1<<17)+(1<<18);
	LPIT0->TMR[1].TVAL=T;
	LPIT0->MIER|=(1<<2);
	//LPIT0->TMR[0].TCTRL|=1;
	S32_NVIC->ISER[49/32]=(1<<(49%32));

}
void LPIT0_Ch1_IRQHandler (void)
{

LPIT0->MSR|=(1<<2);
//Borrar bandera
LPIT0->TMR[1].TCTRL&=~(1<<0);
PTC->PTOR=atras;

if (espejo_pin==1)
{
espejo_pin=0;
LPIT0->TMR[1].TVAL=(((100-(unsigned int)duty_cycle)*T)/100);
}
else
{
espejo_pin=1;
LPIT0->TMR[1].TVAL=((((unsigned int)duty_cycle)*T)/100);
}
LPIT0->TMR[1].TCTRL|=(1<<0);       //Enable->Trigger
}

void LPIT0_Ch2_init(void)
{

	PCC->PCCn[PCC_LPIT_INDEX]=(2<<24);
    PCC->PCCn[PCC_LPIT_INDEX]|=(1<<30);
	SCG->SIRCDIV=(1<<8);  //8MHz/1

	LPIT0->MCR=1;		//M_CEN=1;
	asm("nop");
	asm("nop");
	asm("nop");
	asm("nop");
	LPIT0->TMR[2].TCTRL=(0<<24)+(1<<23)+(1<<17)+(1<<18);
	LPIT0->TMR[2].TVAL=T;
	LPIT0->MIER|=(1<<3);
	//LPIT0->TMR[0].TCTRL|=1;
	S32_NVIC->ISER[50/32]=(1<<(50%32));

}
void LPIT0_Ch2_IRQHandler (void)
{

LPIT0->MSR|=(1<<3);
//Borrar bandera
LPIT0->TMR[2].TCTRL&=~(1<<0);
PTC->PTOR=derecha;

if (espejo_pin==1)
{
espejo_pin=0;
LPIT0->TMR[2].TVAL=(((100-(unsigned int)duty_cycle)*T)/100);
}
else
{
espejo_pin=1;
LPIT0->TMR[2].TVAL=((((unsigned int)duty_cycle)*T)/100);
}
LPIT0->TMR[2].TCTRL|=(1<<0);       //Enable->Trigger
}

void LPIT0_Ch3_init(void)
{


	PCC->PCCn[PCC_LPIT_INDEX]=(2<<24);
    PCC->PCCn[PCC_LPIT_INDEX]|=(1<<30);
	SCG->SIRCDIV=(1<<8);  //8MHz/1

	LPIT0->MCR=1;		//M_CEN=1;
	asm("nop");
	asm("nop");
	asm("nop");
	asm("nop");
	LPIT0->TMR[3].TCTRL=(0<<24)+(1<<23)+(1<<17)+(1<<18);
	LPIT0->TMR[3].TVAL=T;
	LPIT0->MIER|=(1<<4);
	//LPIT0->TMR[0].TCTRL|=1;
	S32_NVIC->ISER[51/32]=(1<<(51%32));

}
void LPIT0_Ch3_IRQHandler (void)
{

LPIT0->MSR|=(1<<4);
//Borrar bandera
LPIT0->TMR[3].TCTRL&=~(1<<0);
PTC->PTOR=izquierda;

if (espejo_pin==1)
{
espejo_pin=0;
LPIT0->TMR[3].TVAL=(((100-(unsigned int)duty_cycle)*T)/100);
}
else
{
espejo_pin=1;
LPIT0->TMR[3].TVAL=((((unsigned int)duty_cycle)*T)/100);
}
LPIT0->TMR[3].TCTRL|=(1<<0);       //Enable->Trigger
}


//********** I2C

void SIRC_div(void)
{

    // Slow IRC Control Status Register
    SCG->SIRCCSR &= ~ (1 << 24);
    // [24] LK = 0 Control Status Register can be written.

    SCG->SIRCCSR &= ~ (1 << 0);
    // [0] SIRCEN = 0 Disable Slow IRC

    // Slow IRC Divide Register
    SCG->SIRCDIV |= 0x0101;
    // [10-8] SIRCDIV2 0b001 Divide by 1 (8MHz)
    // [2-0]  SIRCDIV1 0b001 Divide by 1 (8MHz)

    SCG->SIRCCSR |= (1 << 0);
    // [0] SIRCEN = 1 Enable Slow IRC

    while((SCG->SIRCCSR & (1 << 24)) == 0); // wait until clock is valid
    // [24] SIRCVLD = 1 Slow IRC is enabled and output clock is valid
}


/*******************************************************************************
Function Name : LPI2C0_init
Notes         : BAUD RATE: 400 kbps
                I2C module frequency 8Mhz (SIRCDIV2_CLK)
                PRESCALER:0x00; FILTSCL/SDA:0x0/0x0; SETHOLD:0x4; CLKLO:0x0B; CLKHI:0x05; DATAVD:0x02
                See Table 50-10 Example timing configuration in S32K1xx Reference manual rev.9
 *******************************************************************************/
void LPI2C0_init(void)
{
    // Peripheral Clock Controller
    PCC-> PCCn[PCC_PORTA_INDEX] = 1<<30;
    // PTA2 ALT3 LPI2C0_SDA
    PORTA->PCR[2] |= 3<<8;
    // PTA3 ALT3 LPI2C0_SCL
    PORTA->PCR[3] |= 3<<8;

    PCC->PCCn[PCC_LPI2C0_INDEX] |= 2<<24;   // SIRCDIV2_CLK (8 MHz)
    PCC->PCCn[PCC_LPI2C0_INDEX] |= 1<<30;

    LPI2C0->MCCR0 = 0x0204050B;
    // [24] DATAVD  0x02
    // [16] SETHOLD 0x04
    // [8]  CLKHI   0x05
    // [0]  CLKLO   0x0B

    // Master Interrupt Enable Register (MIER)
    LPI2C0->MIER = (1<<10);
    // [10] NDIE = 1  (NACK detect interrupt enabled)

    // Master Control Register
    LPI2C0->MCR = 0x301;
    // [9] RRF = 1   (Receive FIFO is reset)
    // [8] RTF = 1   (Transmit FIFO is reset)
    // [0] MEN = 1   (Master logic is enabled)

    // LPI2C_Master_IRQHandler
    S32_NVIC->ICPR[0] = (1 << (24 % 32));
    S32_NVIC->ISER[0] = (1 << (24 % 32));
    S32_NVIC->IP[24]  = 0x00;                 // Priority level 0
}

/*******************************************************************************
Function Name : I2C_bus_busy
Returns       : uint8_t
Notes         : I2C Bus is idle/busy
 *******************************************************************************/
static unsigned char bus_busy(void)
{
     error = 0;                 // CLEAR ALL ERRORS

     unsigned int timeout_b = 0;
     while ((LPI2C0->MSR & (1 << 25)) && (timeout_b < 1000))  ++timeout_b;

     if(timeout_b >= 1000) return (error |= (1 << 1));

     /*
      * For debugging purposes
      */ //PTD-> PCOR |= (1 << 0); // BLUE LED ON

     return 0;
}

/*******************************************************************************
Function Name : I2C_start_ACK
Parameters    : uint8_t address
Notes         : Generate (repeated) START and transmit address in DATA[7:0]
 *******************************************************************************/
void generate_start_ACK(uint8_t address)
{
    uint32_t command    = (address << 0);
    command             |= (0b100 << 8);
    LPI2C0->MTDR = command;
}

/*******************************************************************************
Function Name : I2C_write_byte
Parameters    : uint8_t data
Notes         : Transmit DATA[7:0]
 *******************************************************************************/
static void transmit_data(uint8_t data)
{
    LPI2C0->MTDR = data;
}


/*******************************************************************************
Function Name : I2C_stop
Returns       : uint8_t
Notes         : Generate STOP condition
 *******************************************************************************/
static uint8_t generate_stop(void)
{
    uint32_t timeout_s      = 0;
    uint8_t stop_sent_err   = 0;

    LPI2C0->MTDR = 0x0200; //command

    while((!(LPI2C0->MSR & (1 << 9))) && (!stop_sent_err))
    {
        if(timeout_s > 3000)
        {
            error |= (1 << 3);
            stop_sent_err = 1;
        }
        timeout_s++;
    }

    if(LPI2C0->MSR & (1 << 9))
    {
        LPI2C0->MSR |= (1 << 9); // Clear Stop flag
    }

     if(error) return error;
     else return 0;
}

/*******************************************************************************
Function Name : I2C_read
Parameters    : uint8_t *p_buffer, uint8_t n_bytes
Modifies      : uint8_t *p_buffer
Returns       : uint8_t
Notes         : Receive (DATA[7:0] + 1) bytes
 *******************************************************************************/
static void receive_data(uint8_t *p_buffer, uint8_t n_bytes)
{
    uint8_t  n;
    uint16_t time;
    uint16_t timeout_r = (2000 * n_bytes);
    uint16_t command;

    command =    0x0100;
    command |=  (n_bytes - 1);
    LPI2C0->MTDR = command;

    while (((LPI2C0->MFSR) >> 16 != n_bytes) && (time < timeout_r)) ++time;

    if(time >= timeout_r)
    {
        LPI2C0->MCR |= (1 << 9);     // reset receive FIFO
        error |= (1 << 2);
    }
    else{
        for(n = 0; n < n_bytes; ++n)
        {
            p_buffer[n] = (uint8_t)(LPI2C0->MRDR & 0x000000FF);
        }
    }
}

/*******************************************************************************
Function Name : I2C_write_reg
Parameters    : uint8_t s_w_address, uint8_t s_reg_address, uint8_t byte
Returns       : uint8_t
Notes         : Write a single byte to a slave's register
 *******************************************************************************/
uint8_t LPI2C0_write(uint8_t s_w_address, uint8_t s_reg_address, uint8_t byte)
{
    if(bus_busy()) return (error |= (1 << 1));
    generate_start_ACK(s_w_address);
    transmit_data(s_reg_address);
    transmit_data(byte);
    if(generate_stop()) return error;
    else return 0;
}

/*******************************************************************************
Function Name : I2C_read
Parameters    : uint8_t s_r_address, uint8_t s_reg_address, uint8_t *p_buffer, uint8_t n_bytes
Modifies      : uint8_t *p_buffer
Returns       : uint8_t
Notes         : Read from a slave
 *******************************************************************************/
uint8_t LPI2C0_read(uint8_t s_r_address, uint8_t s_reg_address, uint8_t *p_buffer, uint8_t n_bytes)
{
    if(bus_busy()) return (error |= (1 << 1));
    generate_start_ACK(s_r_address - 1);
    transmit_data(s_reg_address);
    generate_start_ACK(s_r_address);
    receive_data(p_buffer, n_bytes);
    if(generate_stop()) return error;
    else return 0;
}


/*******************************************************************************
Function Name : LPI2C0_Master_IRQHandler
 *******************************************************************************/
void LPI2C0_Master_IRQHandler(void)
{



	  LPIT0->MSR|=1;
	  PTD->PTOR=1;
	  //s_reg_adrress = transmit data = Es el tercer valor 0x6B/0x3B leer o escribir
	  //1010 adress IIC 24LC01B

	  //escribimos un dato para poder leer
	  LPI2C0_write((0x68<<1),0b1010,0x00);


	  LPI2C0_read((0x68<<1)+1,0x3B,var_read,2);

	  //movimiento1
	  datos_recibidosI2C[0] =(var_read[0]);
	  //duracion de movimiento1
	  datos_recibidosI2C[1] =(var_read[0]<<8);

	  //movimiento2
	  datos_recibidosI2C[2] =(var_read[0]<<16);
	  //duracion de movimiento2
	  datos_recibidosI2C[3] =(var_read[0]<<24);

	  //movimiento3
	  datos_recibidosI2C[4] =(var_read[0]<<32);
	  //duracion de movimiento2
	  datos_recibidosI2C[5] =(var_read[0]<<40);

	  //movimiento4
	  datos_recibidosI2C[6] =(var_read[0]<<48);
	  //duracion de movimiento2
	  datos_recibidosI2C[7] =(var_read[0]<<56);













}



int main(void)
{
	UART_init();
	PORTC_init();
	LPIT0_Ch0_init();
	LPIT0_Ch1_init();
	LPIT0_Ch2_init();
	LPIT0_Ch3_init();


	//I2C Hardware
	SIRC_div();
	LPI2C0_init();

    while(1){

    }
	return 0;
}

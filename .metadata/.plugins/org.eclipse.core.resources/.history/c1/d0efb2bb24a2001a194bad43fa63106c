/*
 * Activamos con pulsos el puente h para ambos motores en el puerto C
 *
 * Motor derecho PORTC
 * 7 adelante
 * 15 atras
 *
 * Motor izquierdo PORTC
 * 14 adelante
 * 17 atras
 *
 * En Uart Rx, dependiendo el dato recibido será la ejecución
 * A Adelante
 * B Atras
 * C Derecha
 * D Izquierda
 * E Alto
 * F Enviar a app monitoreo de rpm
 * G Enviar a matlab para hacer retroalimentación en lazo cerrado
 *
 * Asignamos valores a la variable temporal_movimiento donde tomará los primeros 7 bits
 * y en la variable temporal_tiempo los bits restantes hasta llegar a 16
 * el movimimento se guardará en la varaiable movimiento para activar los pines en LPIT0 Ch3
 * y posteriormente haremos un delay, con el valor que llegue a la variable temporal_tiempo
 *
 *
 */

#include "S32K144.h" /* include peripheral declarations S32K144 */
#include "rutas_app.h"
#include "I2C_giroscopio.h"


#define adelante (1<<14)+(1<<7) //Seleccionamos pines 7 y 14;
#define atras (1<<17)+(1<<15) //Seleccionamos pines 15 y 17;
#define derecha (1<<17)+(1<<7) //Seleccionamos pines 7 y 17;
#define izquierda (1<<15)+(1<<14) //Seleccionamos pines 15 y 14;
#define alto (0<<17)+(0<<15)+(0<<14)+(0<<7)

//Micro-matlab
unsigned char mensaje1[]={"A####\r\n"};  // 'H'<> "H"
unsigned char dato[]={"1"};



unsigned movimiento;
unsigned char duty_cycle=50;
unsigned char espejo_pin;
unsigned tx;

unsigned char T=100;
int16_t data=0;



void delay (unsigned char tiempoms){
	unsigned char i=0;
	i=500*tiempoms;
	do{

	}while (--i);
}

void send_matlab(void){
	unsigned char j=0;
	unsigned char i=0;
	do{
			j=0;
			do{
				i=0;
				do{
					mensaje1[1]=dato[j];
					do{}while ((LPUART1->STAT & (1<<23))==0);
					LPUART1->DATA=mensaje1[i++];

				}while (mensaje1[i]!=0);
				j++;
			} while(dato[j]!=0);
		} while(1);
}

void LPUART1_RxTx_IRQHandler (void)
{

	if ((LPUART1->STAT & (1<<21))==(1<<21))   //Rx
	{
		unsigned temporal_movimiento;
		unsigned temporal_tiempo;
		data=LPUART2->DATA;
		temporal_movimiento = data & 0x80; //toma los primeros 7 bits
		temporal_tiempo = data & 0x10000; //toma los otros para llegar a 2 pow(16)

			if (temporal_movimiento == 'A') {
				movimiento=adelante;
				LPIT0->TMR[3].TCTRL|=1;
			}
		    else if (temporal_movimiento == 'B'){
		    	movimiento=atras;
		    	LPIT0->TMR[3].TCTRL|=1;
		    }
		    else if (temporal_movimiento == 'C') {
		    	movimiento=derecha;
		    	LPIT0->TMR[3].TCTRL|=1;
		    }
		    else if (temporal_movimiento == 'D'){
		    	movimiento=izquierda;
		    	LPIT0->TMR[3].TCTRL|=1;
		    }
		    else if (temporal_movimiento == 'E') {
		    	movimiento=alto;
		    	LPIT0->TMR[3].TCTRL|=1;
		    }
		    else if (temporal_movimiento == 'F') {
		    	//Enviar rpm
		   	    }
		    else if (temporal_movimiento == 'G') {
				 //Enviar enviar matlab
		    	 send_matlab();

		         }
		    else if (temporal_movimiento == 'H') {
		  				 //Enviar giroscopio
		    			tx=*datos_I2C;
		  		         }




			//LPUART2->DATA=*datos_I2C;
			//ejecutamos la funcion el tiempo delimitado
			delay(temporal_tiempo);


	}

	if ((LPUART1->STAT & (1<<23))==(1<<23)) //TX
	{
		LPUART1->DATA=tx;

     }
}

void UART_init(void)
{

	PCC->PCCn[PCC_PORTC_INDEX]=1<<30;
	PORTC->PCR[7]=2<<8;						//LPUART1 TX
	PORTC->PCR[6]=2<<8;						//LPUART1 RX

	SCG->SIRCDIV=1<<8;						//SIRCDIV2: 8 MHz/1

	PCC->PCCn[PCC_LPUART1_INDEX]=2<<24;		//SIRCDIV2
    PCC->PCCn[PCC_LPUART1_INDEX]|=1<<30;
	LPUART1->BAUD|=52;						//BAUD_SRG=CLK_UART/(16*9600)
	LPUART1->CTRL|=(1<<21)+(1<<19)+(1<<18);	//TE=RE=1
	S32_NVIC->ISER[33/32]=(1<<(33%32));

}

void PORTC_init(void)
{
	PCC->PCCn[PCC_PORTC_INDEX]=(1<<30);
	PORTC->PCR[7]=(9<<16)+(1<<8);
	PORTC->PCR[15]=(9<<16)+(1<<8);
	PORTC->PCR[17]=(9<<16)+(1<<8);
	PORTC->PCR[14]=(9<<16)+(1<<8);
	PTC->PDDR=(1<<7)+(1<<15)+(1<<17)+(1<<14);
	PTC->PDOR=0;
}
void LPIT0_Ch3_init(void)
{

	PCC->PCCn[PCC_LPIT_INDEX]=(2<<24);
    PCC->PCCn[PCC_LPIT_INDEX]|=(1<<30);
	SCG->SIRCDIV=(1<<8);  //8MHz/1

	LPIT0->MCR=3;		//M_CEN=1;
	asm("nop");
	asm("nop");
	asm("nop");
	asm("nop");
	LPIT0->TMR[3].TCTRL=(0<<24)+(1<<23)+(1<<17)+(1<<18);
	LPIT0->TMR[3].TVAL=T;
	LPIT0->MIER=3;
	//LPIT0->TMR[0].TCTRL|=1;
	S32_NVIC->ISER[51/32]=(1<<(51%32));

}
void LPIT0_Ch3_IRQHandler (void)
{

LPIT0->MSR|=1;
//Borrar bandera
LPIT0->TMR[3].TCTRL&=~(1<<0);
PTC->PTOR=movimiento;

if (espejo_pin==1)
{
espejo_pin=0;
LPIT0->TMR[3].TVAL=(((100-(unsigned int)duty_cycle)*T)/100);
}
else
{
espejo_pin=1;
LPIT0->TMR[3].TVAL=((((unsigned int)duty_cycle)*T)/100);
}
LPIT0->TMR[3].TCTRL|=(1<<0);       //Enable->Trigger



}





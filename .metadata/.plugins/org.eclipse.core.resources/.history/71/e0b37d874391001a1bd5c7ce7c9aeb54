
#include "S32K144.h" /* include peripheral declarations S32K144 */

unsigned short frec;
unsigned short t_viejo=0;
unsigned char n_muestra=1;
unsigned short tiempo1;
unsigned short delta_US;
unsigned char distancia_cm;

void FTM2_Ch0_Ch1_IRQHandler (void)
{

	if ((FTM2->CONTROLS[0].CnSC & (1<<7))==(1<<7))
	{
		(void) FTM2->CONTROLS[0].CnSC;			//1er paso para borrar bandera
		FTM2->CONTROLS[0].CnSC&=~(1<<7);		//2o. paso para borrar bandera
		if (n_muestra==1)
		{
			tiempo1=FTM2->CONTROLS[0].CnV;
			n_muestra=2;
		}
		else
		{
			delta_US=FTM2->CONTROLS[0].CnV-tiempo1;
			distancia_cm=delta_US/59;
			n_muestra=1;
			FTM2->CONTROLS[0].CnSC&=~(1<<6);
			if (distancia_cm<=55)
			{
				//opcion 1: stop
				//opcion 2: prender una bandera para iniciar algoritmo evasión
			}
		}
		}

}

void ultrasonico_init (void)
{
unsigned short delay;
	PTA->PSOR=(1<<1);						//PTA1=1  Trigger
	//10 us al menos
	for (delay=0; delay<= 5000;delay++);	//mantener en PTA1=1 al menos 10 us
	PTA->PCOR=(1<<1);						//PTA1=0  Trigger
	for (delay=0; delay<= 2000;delay++);
	FTM2->CONTROLS[0].CnSC=(1<<6)+(3<<2);		//0011 MSB:MSA, ELSB:ELSA. hab Intr
												//ambos flancos
}

void FTM2_Ch0_Ch1_init(void)
{
	PCC->PCCn[PCC_PORTA_INDEX]=1<<30;
		PORTA->PCR[0]=2<<8;						//FTM2_CH1
		PORTA->PCR[1]=1<<8;						//GPIO para trigger ultrasonico
		PTA->PCOR=1<<1;							//PTA1=0
		PTA->PDDR=1<<1;							//Output

		PCC->PCCn[PCC_PORTC_INDEX]=1<<30;
		PORTC->PCR[5]=2<<8;						//FTM2_CH0

		SCG->SIRCDIV=1<<0;						//SIRCDIV1: 8 MHz/1 (125 ns)

	    PCC->PCCn[PCC_FTM2_INDEX]=2<<24;		//SIRCDIV1
		PCC->PCCn[PCC_FTM2_INDEX]|=1<<30;

		FTM2->SC=(3<<3)+3;						//3<<3 (Reloj externo SIRCDIV1)
												// 3: preescaler 8 (1MHz, 1 us)
		FTM2->CONTROLS[0].CnSC=(1<<6)+(1<<2);		//0001 MSB:MSA, ELSB:ELSA. hab Intr

		S32_NVIC->ISER[111/32]=1<<(111%32);		//Hab FTM2 Ch0 y CH1

}

int main(void)
{


	ultrasonico_init();
	FTM2_Ch0_Ch1_init();
	while (1)
	{



	}
	return 0;
}

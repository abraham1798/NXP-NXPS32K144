#include "S32K144.h" /* include peripheral declarations S32K144 */

unsigned char dato=2;
int mensaje[]={11,12,13,14};

//int *mensaje[]={&dato,&dato,&dato};
unsigned short i=0;

void LPUART2_RxTx_IRQHandler (void)
{
                if ((LPUART2->STAT & (1<<23))==(1<<23))   //Rx empty flag
                {
                	//LPUART2->DATA=mensaje[i++];
                	//LPUART2->DATA=mensaje[i++];
                	//if(mensaje[i]==mensaje[2]) i=0;
                    LPUART2->DATA=dato;
                    if (dato!='2'){LPUART2->CTRL&=~(1<<23);}
                }
                if ((LPUART2->STAT & (1<<21))==(1<<21))   //Rx full flag
                {
                 //   dato=LPUART2->DATA;
                }

}

void LPUART1_RxTx_IRQHandler (void)
{
                if ((LPUART1->STAT & (1<<23))==(1<<23))   //Rx empty flag
                {
                	//LPUART2->DATA=mensaje[i++];
                	//LPUART2->DATA=mensaje[i++];
                	//if(mensaje[i]==mensaje[2]) i=0;
                    //LPUART1->DATA=dato;
                   // if (dato!='2'){LPUART2->CTRL&=~(1<<23);}
                }
                if ((LPUART1->STAT & (1<<21))==(1<<21))   //Rx full flag
                {
                    dato=LPUART1->DATA;
                }

}




int main(void)
{
                                                                                      //LPUART2 RX

                //LED de respuesta
                PCC->PCCn[PCC_PORTD_INDEX]=1<<30;
                PORTD->PCR[16]=(1<<8);    //GPIO
                PORTD->PCR[15]=(1<<8);    //GPIO
                PORTD->PCR[0]=(1<<8);     //GPIO
                PTD->PDDR=(1<<16)+(1<<15)+1;   //outputs
                PTD->PDOR=(1<<16)+(1<<15)+1;   //estado inicial off

                SCG->SIRCDIV=1<<8;                                                                                   //SIRCDIV2: 8 MHz/1

                //UART2

                PCC->PCCn[PCC_PORTA_INDEX]=1<<30;
                PORTA->PCR[9]=2<<8;  //tx                                                                               //LPUART2 TX
                PORTA->PCR[8]=2<<8;  //rx
                PCC->PCCn[PCC_LPUART2_INDEX]=2<<24;                     //SIRCDIV2
                PCC->PCCn[PCC_LPUART2_INDEX]|=1<<30;
                LPUART2->BAUD|=52;                                                                                 //BAUD_SRG=CLK_UART/(16*9600)
                LPUART2->CTRL|=(1<<23)+(1<<21)+(1<<19)+(1<<18);   //TE=RE=1
                S32_NVIC->ISER[35/32]=(1<<(35%32));

                                                                                        //LPUART2 RX


                //UART1

                PCC->PCCn[PCC_PORTC_INDEX]=1<<30;
                PORTC->PCR[7]=2<<8;  //tx                                                                               //LPUART2 TX
                PORTC->PCR[6]=2<<8;  //rx
                PCC->PCCn[PCC_LPUART1_INDEX]=2<<24;                     //SIRCDIV2
                PCC->PCCn[PCC_LPUART1_INDEX]|=1<<30;
                LPUART1->BAUD|=52;                                                                                 //BAUD_SRG=CLK_UART/(16*9600)
                LPUART1->CTRL|=(1<<23)+(1<<21)+(1<<19)+(1<<18);   //TE=RE=1
                //S32_NVIC->ISER[35/32]=(1<<(35%32));   //revisar

    while(1){

    if (dato=='A') PTD->PDOR=(1<<16)+1;  //rojo
    if (dato=='B') PTD->PDOR=(1<<15)+1;  //verde
    if (dato=='C') PTD->PDOR=(1<<16)+(1<<15);  //azul
    if (dato=='E') PTD->PDOR=(1<<16)+(1<<15)+1;//apagar


    }
                return 0;
}
